
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Keyboard and RTC Not Working Together:
Description: There was an issue with the keyboard and real-time clock (RTC) not functioning simultaneously.
Resolution: All interrupts (IRQs) were disabled before initializing devices, ensuring they wouldn't interfere.
Difficulty: Medium, 5 lines
Amount of Time Spent: A few hours were spent on diagnosis and resolution.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Keyboard Not Printing to Screen:
Description: The keyboard input was not being displayed on the screen.
Resolution: Scan codes were being read from the wrong port (0x64) when it should have been 0x60. This port swap was corrected.
Difficulty: Low, 1 line
Amount of Time Spent: Less than an hour was spent diagnosing and fixing the issue.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Boot Loop GDT:
Description: There was a boot loop issue related to the Global Descriptor Table (GDT).
Resolution: The problem was traced to bit alignment for GDT descriptors. Adjustments were made to align the bits correctly.
Difficulty: Medium, 2-3 lines
Amount of Time Spent: Several hours were required for diagnosis and resolution.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Boot Loop Paging:
Description: A boot loop issue was linked to paging.
Resolution: The issue was identified to be related to a union causing a struct problem. The global bit wasn't set high for the kernel. The kernel address was incorrectly set to 1 instead of a multiple of 1024.
Difficulty: High, 10-20 lines
Amount of Time Spent: Several hours were invested in diagnosing and resolving the problem.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Undefined References and Header File Inclusion in Assembly Files:
Description: The project had multiple instances of undefined references and complications due to header files included in assembly files.
Resolution: The issue was traced back to header files improperly included in assembly files, leading to undefined references. Header file inclusions were corrected to resolve this issue.
Difficulty: High
Amount of Time Spent: A significant amount of time was needed due to the variable number of lines that needed to be fixed, involving both header file inclusions and resolving undefined references.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






//CHECKPOINT 3.2 ECE 391 BUG LOG ERRORS AND BUGS

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Initialization of File System Inaccuracy Leading to Null Pointers and Page Faults
Description: The init function that sets up the inode array and data block arrays did not populate the arrays correctly. This resulted in null pointers and page faults in later functions.
Resolution: The issue was found to be related to the calculation of the inode index. The calculation was updated from (inode_t*)mod_start + 4096 * (inode num + 1) to (inode_t*)mod_start + 1024 * (inode num + 1) to account for pointer increments.
Difficulty: Moderate – Required changing a number in two places.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for RTC Not Writing Frequencies Accurately
Description: When specifying a frequency for the RTC, the set frequency was not reflected accurately.
Resolution: It was discovered that the rate was being written to the port instead of the frequency. The resolution involved calculating the rate based on the given frequency and updating the write operation accordingly.
Difficulty: Moderate – Required adding around 5 lines to calculate the rate from the frequency.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Backspacing After Enter Allows Going to Previous Line on Multi-Line Buffer
Description: Backspacing after pressing enter allowed users to navigate to the previous line if the buffer contained more than 80 characters (one row).
Resolution: The issue was related to flags set up for backspacing. The flag logic was removed (~4 lines), and a check was added in the keyboard handler to ensure that the global keyboard buffer index was not zero. If it was, backspace functionality was bypassed.
Difficulty: Low – Removed around 4 lines and added one line.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Ctrl+L Functionality Issue
Description: When the Ctrl key was pressed, the 'l' key would always clear the screen even when Ctrl was no longer pressed.
Resolution: The flag for Ctrl was not being reset when Ctrl was released. An if statement was added to set the flag back to low when Ctrl was released.
Difficulty: Low – Required adding one if statement.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//CHECKPOINT 3.3 ECE 391 BUG LOG ERRORS AND BUGS

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for File Descriptor Mismatch:
Description: There was an issue with file descriptors not matching the actual opened files. This was an issue with mapping the fd array by address. 
Resolution: The bug was traced to an incorrect mapping of file descriptors to the array. The code was updated to ensure that file descriptors accurately point to the corresponding files.
Difficulty: Medium, 6 lines
Amount of Time Spent: 2 hours were spent on diagnosis and resolution.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Auto-Page Faulting:
Description: We were getting an error where we were page faulting directly in the syserr without any reason for why 
Resolution: The problem that we found was that we hadn't define the assembly linkage's .long for our close
Difficulty: High, 1 line
Amount of Time Spent: This took 30 hours to resolve. This was the longest error we have had to fix in our lives. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Unhandled Page Faults during HALT:
Description: Page faults were not properly handled, causing the system to crash when a process accessed invalid memory addresses when calling halty
Resolution: The return statements that were passed into EAX from HALT was incorrect so we had to account for all scenarios to send values into EAX
Difficulty: High, 12 lines
Amount of Time Spent: This error took around 2-3 hours to resolve
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Page Fault for Creating PCBs
Description: We had a test case where we were implementing pseudo PCBs for all the implmentable PCBs but this was eventually page fualting
Resolution: This bug was traced back to the fact that we hadn't limited the ability to only have a maximum of 6 pcbs so there were memory values being reset that went over the limit. 
Amount of Time Spent: About an hour was spent on this error.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Missing Error Handling in File Operations backtracking to read/write funtions:
Description: The code lacked proper error handling for file operations, leading to undefined behavior when attempting to read or write to non-existing files.
Resolution: The issue was traced back to missing error handling in file read and write operations. Appropriate error codes and messages were added to handle cases where files do not exist or file operations fail.
Difficulty: Low, 2 lines
Amount of Time Spent: Less than an hour was spent. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






CHECKPOINT 3.4

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Fish drawing a bunch of zeros at the end
Description: When we ran fish it would draw a fish but would not terminate and instead write zeros afterwards
Resolution: After using gdb, we saw that our fd array (which was an array of pointers) gave all entires the same memory address. So, when one file closed, all of them would close. This meant that it would continuously return -1 rather than 0 when your reached the end of the other file, causing it to continuously print zeros. We fixed this by making all of our fd entries be structs rather than pointers. 
Difficulty: Had to change all pointers to structs in a number of places to allow for an array of static structs rather than pointers
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Fish only printing one frame
Description: When we ran fish, the only thing that would change would be the I and M but not the actual frames
Resolution: We created and populated a global dentry in read file, so we would always be reading the most recent file even when we wanted to read data from a different file. We instead used the fd variable passed in and used that to know which file we wanted, so that it could switch between open files and blink properly
Difficulty: We had to fix one line of code
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Syserr failure-”Shel”
Description: Our open file would open “Shel” ,reading it as shell
Resolution: In our compare string function, we would only compare the number of chars that were in the passed in parameter. This meant it would compare “Shel” with “Shel”, rather than “Shell”. We fixed this by instead having it compare 32 characters, so it would compare nulls with each other and see that shel followed by many nulls is different than shell followed by nulls
Difficulty: We had to fix one value in the string compare. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Checkpoint 3.5

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Terminal Opening Breaking Other Terminals:
Description: Opening new terminals while executing the shell caused a breaking issue, resulting in an error. Resolving this took 30 minutes. The correction involved executing all three shells simultaneously to prevent exceeding the limit of 6 programs.
Resolution: Execute all three shells at once to avoid the issue of attempting to execute more than 6 programs simultaneously.
Difficulty: Low, 1 line
Amount of Time Spent: 30 minutes
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Program Running on Wrong Terminal After Switch:
Description: Terminal switching resulted in the previous terminal's program running on the next terminal. Resolving this took around 3 hours. The fix involved saving and restoring proper values in the TSS (Task State Segment) structure, such as tss.esp0 and tss.ss.
Resolution: Save and restore the necessary values in the TSS structure during terminal switches.
Difficulty: Medium, 5 lines
Amount of Time Spent: 3 hours
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Page Fault Exceptions due to Paging and Video Memory Issues:
Description: Page fault exceptions occurred frequently due to issues with paging and video memory. This was a general error but required fixing addresses and values in the paging process and terminal code. The resolution involved correcting addresses and values.
Resolution: Correct addresses and values in the paging process and terminal code to resolve page fault exceptions.
Difficulty: High, 10 lines
Amount of Time Spent: Several hours
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Bug Report for Incorrect Cursor Position After Terminal Switch:
Description: The cursor position was not restored correctly when switching terminals, causing it to remain in the previous terminal's position. Resolving this took around 1 hour. The correction involved saving and restoring everything for the keyboard buffer and cursor values during terminal switches, ensuring each terminal had its own settings.
Resolution: Save and restore keyboard buffer and cursor values for each terminal during switching.
Difficulty: Low, 2 lines
Amount of Time Spent: 1 hour
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
